<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://koalr.me/</id>
    <title>Koalrの沉思录</title>
    <updated>2021-01-16T13:23:20.406Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://koalr.me/"/>
    <link rel="self" href="https://koalr.me/atom.xml"/>
    <subtitle>一个做安全开发的佛系少年的自留地</subtitle>
    <logo>https://koalr.me/images/avatar.png</logo>
    <icon>https://koalr.me/favicon.ico</icon>
    <rights>All rights reserved 2021, Koalrの沉思录</rights>
    <entry>
        <title type="html"><![CDATA[终章]]></title>
        <id>https://koalr.me/post/an-end/</id>
        <link href="https://koalr.me/post/an-end/">
        </link>
        <updated>2021-01-16T12:01:08.000Z</updated>
        <summary type="html"><![CDATA[<p>随着耳边响起一阵发动机的咆哮声，我踏上了公历年前的最后一次航行，而这次的目的地恰是年初第一次航行的始发地。兜兜转转度过了这魔幻的一年，最后以这种方式完成了一次产品经理口中经常提到的“闭环”。在 1613088000 这个时间戳不可阻挡的到来之前，我想为 2020 做个后记，记录下一个以我为中心的“人类观察报告”。</p>
]]></summary>
        <content type="html"><![CDATA[<p>随着耳边响起一阵发动机的咆哮声，我踏上了公历年前的最后一次航行，而这次的目的地恰是年初第一次航行的始发地。兜兜转转度过了这魔幻的一年，最后以这种方式完成了一次产品经理口中经常提到的“闭环”。在 1613088000 这个时间戳不可阻挡的到来之前，我想为 2020 做个后记，记录下一个以我为中心的“人类观察报告”。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shiro RememberMe 漏洞检测的探索之路]]></title>
        <id>https://koalr.me/post/shiro-deserialization-detection/</id>
        <link href="https://koalr.me/post/shiro-deserialization-detection/">
        </link>
        <updated>2020-07-31T07:05:57.000Z</updated>
        <summary type="html"><![CDATA[<p>Shiro 是 Apache 旗下的一个用于权限管理的开源框架，提供开箱即用的身份验证、授权、密码套件和会话管理等功能。该框架在 2016 年报出了一个著名的漏洞——Shiro-550，即 RememberMe 反序列化漏洞。4年过去了，该漏洞不但没有沉没在漏洞的洪流中，反而凭借其天然过 WAF 的特性从去年开始逐渐升温，恐将在今年的 HW 演练中成为后起之秀。面对这样一个炙手可热的漏洞，这篇文章我们就来讲下，我是如何从 0 到 1 的将该漏洞的自动化检测做到极致的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Shiro 是 Apache 旗下的一个用于权限管理的开源框架，提供开箱即用的身份验证、授权、密码套件和会话管理等功能。该框架在 2016 年报出了一个著名的漏洞——Shiro-550，即 RememberMe 反序列化漏洞。4年过去了，该漏洞不但没有沉没在漏洞的洪流中，反而凭借其天然过 WAF 的特性从去年开始逐渐升温，恐将在今年的 HW 演练中成为后起之秀。面对这样一个炙手可热的漏洞，这篇文章我们就来讲下，我是如何从 0 到 1 的将该漏洞的自动化检测做到极致的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从语法角度绕过 XSSChop]]></title>
        <id>https://koalr.me/post/xsschop-bypass/</id>
        <link href="https://koalr.me/post/xsschop-bypass/">
        </link>
        <updated>2020-07-14T07:52:34.000Z</updated>
        <summary type="html"><![CDATA[<p>放一篇存货，文中所有绕过方法已经确认在雷池引擎修复。</p>
]]></summary>
        <content type="html"><![CDATA[<p>放一篇存货，文中所有绕过方法已经确认在雷池引擎修复。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[7u21 与 8u20]]></title>
        <id>https://koalr.me/post/7u21-and-8u20/</id>
        <link href="https://koalr.me/post/7u21-and-8u20/">
        </link>
        <updated>2020-07-09T14:22:01.000Z</updated>
        <summary type="html"><![CDATA[<p>做安全的有谁不喜欢这两串符号呢？</p>
]]></summary>
        <content type="html"><![CDATA[<p>做安全的有谁不喜欢这两串符号呢？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CommonsCollections 系列反序列化]]></title>
        <id>https://koalr.me/post/commonscollections-deserialization/</id>
        <link href="https://koalr.me/post/commonscollections-deserialization/">
        </link>
        <updated>2020-07-07T06:26:41.000Z</updated>
        <summary type="html"><![CDATA[<p>之前做 fastjson 的检测只能说一只脚踏入了 Java 安全，若想真正入门 Java 安全，CommonsCollections 系列反序列化利用链是一个非常好的学习资源，个人感觉看完后收获颇丰，我把比较关键的一些点都记录下来了，并把这些零散的内容整理成了一份表格放在这篇文章最后，如果不关心背后的原理，直接看最后的总结即可。文中提到的那些 K1 ~ K4 可以从这里直接下载使用：<a href="https://github.com/zema1/ysoserial">https://github.com/zema1/ysoserial</a></p>
]]></summary>
        <content type="html"><![CDATA[<p>之前做 fastjson 的检测只能说一只脚踏入了 Java 安全，若想真正入门 Java 安全，CommonsCollections 系列反序列化利用链是一个非常好的学习资源，个人感觉看完后收获颇丰，我把比较关键的一些点都记录下来了，并把这些零散的内容整理成了一份表格放在这篇文章最后，如果不关心背后的原理，直接看最后的总结即可。文中提到的那些 K1 ~ K4 可以从这里直接下载使用：<a href="https://github.com/zema1/ysoserial">https://github.com/zema1/ysoserial</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[推开 xray 之门]]></title>
        <id>https://koalr.me/post/a-tour-of-xray/</id>
        <link href="https://koalr.me/post/a-tour-of-xray/">
        </link>
        <updated>2020-01-12T13:27:27.000Z</updated>
        <summary type="html"><![CDATA[<p>我非常荣幸的参加了今年的阿里白帽大会，会上分享了一个议题 <strong>《漏洞挖掘进化论 - 推开 xray 之门》</strong>，这里做一个简单的记录和解读。 <a href="/files/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%BF%9B%E5%8C%96%E8%AE%BA-%E6%8E%A8%E5%BC%80xray%E4%B9%8B%E9%97%A8.pdf">下载地址</a></p>
]]></summary>
        <content type="html"><![CDATA[<p>我非常荣幸的参加了今年的阿里白帽大会，会上分享了一个议题 <strong>《漏洞挖掘进化论 - 推开 xray 之门》</strong>，这里做一个简单的记录和解读。 <a href="/files/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%BF%9B%E5%8C%96%E8%AE%BA-%E6%8E%A8%E5%BC%80xray%E4%B9%8B%E9%97%A8.pdf">下载地址</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fastjson 反序列化漏洞自动化检测]]></title>
        <id>https://koalr.me/post/fastjson-deserialization-detection/</id>
        <link href="https://koalr.me/post/fastjson-deserialization-detection/">
        </link>
        <updated>2019-12-17T05:38:07.000Z</updated>
        <summary type="html"><![CDATA[<p>fastjson 是 java 中常用的一个用来序列化/反序列化 JSON 数据的库。因其优异的性能表现，在 java web 开放中应用比较广泛。这两天花 3 分钟入门了 JAVA 安全，恰巧最近需要写一个 fastjson 的检测插件，稍微研究了一下后，感觉有一个比较不错的检测方法，在这里和大家分享下。</p>
]]></summary>
        <content type="html"><![CDATA[<p>fastjson 是 java 中常用的一个用来序列化/反序列化 JSON 数据的库。因其优异的性能表现，在 java web 开放中应用比较广泛。这两天花 3 分钟入门了 JAVA 安全，恰巧最近需要写一个 fastjson 的检测插件，稍微研究了一下后，感觉有一个比较不错的检测方法，在这里和大家分享下。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP 被动代理的那些事]]></title>
        <id>https://koalr.me/post/passive-scan-via-http-proxy/</id>
        <link href="https://koalr.me/post/passive-scan-via-http-proxy/">
        </link>
        <updated>2019-08-16T09:07:27.000Z</updated>
        <summary type="html"><![CDATA[<p>HTTP 代理这个名词对于安全从业人员应该都是熟知的，我们常用的抓包工具 burp 就是通过配置 HTTP 代理来实现请求的截获修改等。然而国内对这一功能的原理类文章很少，有的甚至有错误。笔者在做 xray 被动代理时研究了一下这部分内容，并整理成了这篇文章，这篇文章我们从小白的角度粗略的聊聊 HTTP 代理到底是如何工作的，在实现被动扫描功能时有哪些细节需要注意以及如何科学的处理这些细节。</p>
]]></summary>
        <content type="html"><![CDATA[<p>HTTP 代理这个名词对于安全从业人员应该都是熟知的，我们常用的抓包工具 burp 就是通过配置 HTTP 代理来实现请求的截获修改等。然而国内对这一功能的原理类文章很少，有的甚至有错误。笔者在做 xray 被动代理时研究了一下这部分内容，并整理成了这篇文章，这篇文章我们从小白的角度粗略的聊聊 HTTP 代理到底是如何工作的，在实现被动扫描功能时有哪些细节需要注意以及如何科学的处理这些细节。</p>
]]></content>
    </entry>
</feed>